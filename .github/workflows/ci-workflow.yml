name: Build and Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  checkout_static_code_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Setup Java JDK
        uses: actions/setup-java@v4.7.1
        with:
          java-version: '21'
          distribution: 'jetbrains'
      - name: Cache SonarQube Packages
        uses: actions/cache@v4.2.3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4.2.3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: ./gradlew build sonar --info

  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      attestations: write
      id-token: write
    outputs:
      build_tag: ${{ steps.latest_tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: get latest tag
        id: latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "Latest tag: $latest_tag"

          if [ -z "$latest_tag" ]; then
            new_version="v0.0.3"
          else
            version=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
            new_version="$major.$minor.$patch"
          fi

          echo "New tag: $new_version"
          echo "tag=$new_version" >> $GITHUB_OUTPUT

          git tag "$new_version"
          git push origin "$new_version"
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/booking_service:${{ steps.latest_tag.outputs.tag }}

  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Test deploy
        run: |
          echo "This is a test deploy"